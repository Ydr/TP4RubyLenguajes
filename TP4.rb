require 'rubygems'
require 'open-uri'
require 'hpricot'
require 'twitter_oauth'

class DatosDePagina
	attr_accessor :titulo, :artista, :link, :derecho
end
def datosbandcamp(tag) #Metodo que se encarga de sacar la informacion del HTML, con ayuda de la biblioteca hpricot y open-uri

	@lista_grupos = []
	link = (("http://bandcamp.com/tag/"+tag).gsub(" ","-")).downcase
	pagina = ''
	#Accesa el link
	open(link) { |f| pagina = f.read}
	#Guarda los datos de la p치gina en la variable datospagina
	strpagina = Hpricot(pagina)
	puts "Buscando resultados en la pagina..."

	for i in 1..10 do
		begin
		puts ("Cargando el resultado %s" % i)
		infoABuscar = "#content.tags > div.leftcolumn > div.results_area > div.results > ul.item_list > li:nth(%s)" % i 			#Tags de HTML a buscar
 		#rindex retorna la posici칩n del string proporcionado
		#Extrae el codigo y lo guarda en un string para analizarlo
		str = strpagina.at(infoABuscar).inner_html
		grupo = DatosDePagina.new
		#NombreArtista
		inicio = str.rindex('"')
		fin = str.rindex('<')
		grupo.artista = str[(inicio + 2)..(fin-1)].gsub("&amp;","&")
		#Titulo
		for j in 1..8 do
			inicio = str.rindex('"',(inicio-1))
		end
		inicio2 = str.rindex('"',(inicio-1))
		grupo.titulo = str[(inicio2 + 1)..(inicio-1)].gsub("&amp;","&")
		#Link 
		inicio = str.rindex('"',(inicio2-1))
		inicio2 = str.rindex('"',(inicio-1))
		grupo.link = str[(inicio2 + 1)..(inicio-1)]
		
		#Esta parte ingresa a la p치gina de la canci칩n escogida para ver si es paga o no		
		pagina2 = ''
		#Accesa el link
		open(grupo.link) { |f| pagina2 = f.read}
		#Guarda el HTML de la pagina de la cancion, para poder saber si es paga o comprada
		strpagina2 = Hpricot(pagina2)
		infoABuscar = "#trackInfoInner > ul.tralbumCommands > li.buyItem > h4.ft" #Tags de HTML que se buscaran
		begin
			str = strpagina2.at(infoABuscar).inner_html
			grupo.derecho = str[83,3]
			if grupo.derecho == "Free"
				grupo.derecho = "Free"
			else grupo.derecho == "Buy"
				grupo.derecho = "Paid"
			end
			rescue Exception => e
				grupo.derecho = "Free"
	
		end
			rescue Exception => e
			if @lista_grupos.length == 0
				abort ("No hay ningun resultado para esta busqueda")
			else
				puts "\n"
				puts "No hay mas resultados con las palabras de busqueda"
				puts "\n"
				break
			end
	end
		@lista_grupos << grupo #Guarda el resultado en la lista global
	end
	puts ("Resultados cargados \n")
end

def mostrar_info(lista) #Muestra los resultados encontrados en las busquedas
	for i in 0..(lista.length-1) do
		puts ("El tweet %s sera" % (i+1))
		puts lista[i].artista 
		puts lista[i].titulo
		puts lista[i].derecho 
		puts lista[i].link
		puts ("\n" )
	end
end

def realizar_tweet(lista) #Funcion que se encarga de realizar los tweet's
	puts ("Por favor espere mientras realizamos los tweet's...")
	for i in 0..(lista.length-1) do
		contenido = (lista[i].artista + " - " +lista[i].titulo + " - " +lista[i].derecho + " - " +lista[i].link)
		@cliente.update(contenido[0,140]) #Linea que se encarga de realizar el tweet
		puts ("Tweet %s realizado" % (i+1))
	end
end

def tweet(lista) #Metodo que llama a realizar_tweet despues de validar
	mostrar_info(lista)
	puts "\n"	
	puts("Desea realizar los tweet's? s/n")
	opc=STDIN.gets
	if (opc.chomp=="s")
		realizar_tweet(lista)
	else
		puts ("Saliendo del programa")
	end
end


def login() #Metodo que se encarga de loguear al usuario en la cuenta, con ayuda de la libreria oauth
	@cliente = TwitterOAuth::Client.new(:consumer_key => 'VwL7A4xfVbTvWFzT6aXZA',
	:consumer_secret => 'C8cgnn6TPyQbbEpgKINUYz1MjKoiySboxI0MqLtSE')
	

	request_token = @cliente.request_token
	puts ("Favor autorizar la aplicacion. Para hacerlo presione click derecho sobre el siguiente link")
	puts ("Luego click izquierdo en abrir el enlace \n")
	puts request_token.authorize_url
	puts ("\nPresione Enter para continuar luego de permitir el acceso")
	STDIN.gets


	begin	
		access_token = @cliente.authorize(
  		request_token.token,
  		request_token.secret)
		rescue Exception => e
			abort("No se ha aceptado la conexion de la aplicacion, programa cerrando...")
		puts ("Conexion establecida satisfactoriamente")
	end
		
	rescue Exception => e
		abort( "TIMEOUT EXCEPTION: al parecer hay un problema con la conexion a internet, programa cerrando...")
end 

begin

	puts ("                ?????
                              ??????????        
   ?                        ??????????????    ??  
  ????                     ????????????????!????   
  ?????                   ????????????????????   ?
  ???????                ????????????????????????  
  ?????????             ???????????????????????  
  ??????????             ????????????????????     
   ???????????????     ?????????????????????     
    ??????????????????????????????????????????     
  ?? ?????????????????????????????????????????     
  ????????????????????????????????????????????     
  ???????????????????????????????????????????      
   ?????????????????????????????????????????     
    ????????????????????????????????????????       
      ??????????????????????????????????????       
         ??????????????????????????????????        
      ????????????????????????????????????         
       ??????????????????????????????????          
        ????????????????????????????????           
          ????????????????????????????            
              ???????????????????????              
             ???????????????????????               
        ?????????????????????????                
 ??????????????????????????????                  
    ????????????????????????                    
        ???????????????          \n\n")     
							
				

	@lista_grupos = Array.new
	@cliente=""
	puts ("|---------------------------------------------------------------------|")
	puts ("Lenguajes de Programacion")
	puts ("Estudiantes Ariel Mora, Yader Morales y Joshua Hernadez")
	puts ("Bienvenido a la aplicacion de tweet's de BandCamp")
	puts ("|---------------------------------------------------------------------|\n")
	puts ("Por favor espere mientras realizamos la conexion...")	
	login()
	puts ("Estableciendo comunicacion con BandCamp")
	puts ("Por favor ingrese el tag mediante el cual desea realizar la busqueda\n")
	tag = STDIN.gets
	puts ("Realizando busqueda...\n")
	datosbandcamp(tag.chomp)
	tweet(@lista_grupos)
	puts ("\nGracias por utilizar nuestra aplicacion :-D")
end
